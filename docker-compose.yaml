services: 
  zk:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    restart: always
    hostname: zk
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zk:2888:3888;2181
    volumes:
      - "~/zk-cluster/zk/data:/data"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    restart: on-failure
    depends_on:
      - zk
    ports:
      - "9092:9092"
      - "9093:9093"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
      KAFKA_LISTENERS: \
        INTERNAL://0.0.0.0:9092,
        EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: \
        INTERNAL://kafka:9092, 
        EXTERNAL://localhost:9093
      # kafka는 Docker Service 용도, localhost는 로컬 프로젝트 용도

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "10000:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zk:2181

  match-redis:
    image: redis:7-alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - match-data:/data


volumes:
  match-data: